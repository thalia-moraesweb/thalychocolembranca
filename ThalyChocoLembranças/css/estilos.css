/* Alteração do Box Model */
*, *::after, *::before { box-sizing: border-box;}

html { font-size: 14px; }

body {
     background-color: whitesmoke;
     font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;

     /* Solução do problema do rodapé:
     Etapa 1: colocar o body em modo flex e definir altura
     mínima usando a (viewport vh) como referência*/
     display: flex;
     flex-direction: column;
     min-height: 100vh;
}
  
/* Etapa 2: fazer o conteudo  (main) ocupar todo
o espaço necessario para empurrar o rodapé para baixo  */
main { flex: 1; background-color: lightblue;}


img { 
    max-width: 100%;
    padding: 10px 15px 10px;
    align-items: center;
    flex-wrap: wrap;
    justify-content: center;
    align-items: center;
 }

/* Reset de elementos */
body, h1, h2, h3, p, figure {
    margin: 0;
    padding: 0;
}

h1 {
    /* font-family: Arial, Helvetica, sans-serif; */
    font-family: 'Raleway', sans-serif;
    font-size: 1.5rem;
    font-weight: bolder;
}

a { text-decoration: none; }

h1 a { 
    background-color: black;
    color: white;
    border-radius: 5px;
    padding: 0.3rem 1rem;
}

header { 
    background-color: whitesmoke;
    text-transform: uppercase;
    
    /* Deixar o cabeçalho fixo */
    position: sticky;
    top: 0;
}

/* Regra para um elemento (no caso, uma div) com
 a classe limitador E dentro do header

 Importante: o flex configurado aqui funcionará SOMENTE
 para a classe limitador aplicada na div dentro do header.
 Além disso, ela também estará recebendo max-width e margin
 vindos da regra da classe.  */
header .limitador {
    display: flex;
    justify-content: space-between;
    align-items: center;
    /* background-color: lightblue; */

     height: 10vh;
}

/* Regra para QUALQUER elemento com a classe limitador  */
.limitador { 
    max-width: 1100px;
    margin: auto;
    width: 95%;
}

/* Regras para o texto/link MENU */
nav h2 {text-align: right; }


nav h2 a {
    color: black;
    font-size: 1.2rem;
    padding: 1rem;
    display: inline-block;
}

nav h2 a:hover,
nav h2 a:focus,
.links-menu a:hover,
.links-menu a:focus {
    background-color: gainsboro;
}

.links-menu {
    list-style: none;
    padding: 0;
    margin: 0;


    /* Esta propriedade será 
    usada posteriormente para esconder 
    a lista */
    display: none; 
}
/* inline- a, span, img com tem eles tem que usar o flex. */
.links-menu a {
    color: black;
    font-weight: bold;
/* in-line não tem espaço. block tem espaço. */
    background-color: white;
    height: 50px;
    display: flex;
    justify-content: center;
    align-items: center;
}

/* Esta regra somente irá funcionar
quando as duas classes estiverem juntas
(links-menu e aberto) 
display flex torna algo invisivel em visivel.
Obs.: esta regra será aplicada posteriormente
com o auxilio de pogramação JavaScript */
.links-menu.aberto {
    /* Neste ponto, usamos o flex pra voltar
    a exibir o menu (qaundo aberto) */
  display: flex;

  /* E fazemos com que os links apareçam 
  verticalmente*/
  flex-direction: column;

  /* Usamos position e coordenadas
  para garantir o posicionamento
  correto do menu quando aberto */
  position: absolute;
  right: 0;
  left: 0;
}


.destaque {
    background-image: url(../imagens/LOGOTM.jpg);
    color: blue;
    height: 90vh;

    background-size: cover;
    background-attachment: fixed;
    text-align: center;

    display: flex;
    flex-wrap: wrap;
    justify-content: center;
    align-items: center;

    /* Alinha tudo (h2 e p) ao centro */   
     align-content: center;
}

/* Sem esta definição de tamanho,
o flex-wrap não funciona */
.destaque h2,
.destaque p {
    width: 100%;
}

.destaque h2 { 
    /* Fonte Responsiva usando
    função clamp() */
    font-size: clamp(1rem, 5vw, 5rem);

    /* Etapa 2: chamar e configurar a 
    animação  */
    animation-name: aparecer;
    animation-duration: 5s;
    /* animation-iteration-count: infinite;
    -o-animation-direction: alternate-reverse; */
}

.destaque p {
    font-size: clamp(1.5rem, 3vw, 4rem);
    font-weight: bold;

    /* Sintaxe COMPLETA */
    animation-name: aparecer;
    animation-duration: 3s;
    animation-delay: 2s;
    animation-fill-mode: backwards;

    /* Sintaxe ABREVIADA */
    /* animation: aparecer 3s 2s backwards; */

 }

 /* Etapa 1: Regra de Animação */
 @keyframes aparecer {
     /* dê */
     from {
          opacity: 0;
          transform: translateY(-100vh);
         } 

         /* para */
     to { 
         opacity: 1; 
         transform: translateY(0);
        }  
 }

.front-end,
.historia,
.localizacao { text-align: center; }

article h2 { padding: 1rem; }

article p { padding: 0.5rem 0; }


.historia {
    background-image: url(../imagens/fundo-madeira.jpg);
    background-attachment: fixed;
    background-size: cover;
}

.historia h2 {
    color: white;
    text-shadow: black 1px 1px 5px;
}                                                       

.historia iframe {
    width: 100%; 
    max-width: 700px;
}
footer {
    background-color: black;
    color: white;
    height: 15vh;
    font-weight: bold;
    display: flex;
    justify-content: center;
    align-items: center;
    text-align: center;
}


/* regras para os conteudos das paginas:Produtos, Serviços e Contato */
.conteudo {
    background-color: lightcyan;
    padding: .7rem; /* PODE SER 0.7rem */
    border-radius: 7px;
}

.conteudo h2 { text-align: center;}

table, th, td {
    border:solid 2px black;

    /* Remove os espaços entre
    as bordas */
    border-collapse: collapse;
}

table {
    width: 80%;
    margin: auto;
    max-width: 600px;
}

caption {
    text-transform: uppercase;
    font-weight: bold;
    font-size: 1.1rem;
    padding-bottom: 5px;   
}

th {
    background-color: black;
    color: white;
    font-size: 1.1rem;
    padding: .5rem;
}

td {
    /* background-color: white; */
    font-size: 1.2rem;
}

/* Formatando os ultimos td's */
td:last-child {
    font-weight: bold;
    text-align: right;
    padding-right: 5px;
}

/* Formatando os primeiros td's */
td:first-child { text-transform: uppercase; }

/* Formatando os "segundos" td's é utilizado quando se tem mais de uma linha */
td:nth-child(2) { text-align: center;}

/* even: par - odd: impar */
tr:nth-child(even) {background-color: lightseagreen;}

form { 
    background-color: aquamarine;
    width: 99%;
    margin: auto;
    padding: 1rem;
    border-radius: 10px;   
}


/* Pseudo-classe :not()
Permite criar exceções para determinadas  regras.
Abaixo, estavamos pegando todos os inputs exceto os do tipo
radio e checkbox */
input:not([type=radio]):not([type=checkbox]), select, textarea {
    border: none;
    padding: 2%;
    width: 100%;
    height: 40px;
    box-shadow: black 0 0 2px;
}

textarea { height: auto;}

button {
    background-color: black;
    color: white;
    border: none;
    padding: 1rem;
    font-weight: bold;
}

form div { margin-top: 1rem; }


@media screen and (min-width: 530px) {
    nav { width: 70%;}
    nav h2 { display: none; }
    .links-menu { display: flex;}
    .links-menu li {width: 100%;}   
}

@media screen and (min-width: 800px) {
    html {font-size: 18px; }
    header .limitador { height: 15vh; } 
    .destaque { height: 85vh; }
}

    
